package com.saber.spring_camel_cxf_client.dto.soap;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.5.0
 * 2022-02-06T17:10:43.925+03:30
 * Generated source version: 3.5.0
 *
 */
@WebServiceClient(name = "PersonSoapService",
                  wsdlLocation = "file:/C:/Users/azizi.s/AppData/Local/Temp/tempdir2240016499295246797.tmp/personSoap_1.wsdl",
                  targetNamespace = "http://services.soap.spring_camel_cxf_soap_provider.saber.com/")
public class PersonSoapService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.soap.spring_camel_cxf_soap_provider.saber.com/", "PersonSoapService");
    public final static QName PersonSoapApi = new QName("http://services.soap.spring_camel_cxf_soap_provider.saber.com/", "personSoapApi");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/azizi.s/AppData/Local/Temp/tempdir2240016499295246797.tmp/personSoap_1.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(PersonSoapService_Service.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/azizi.s/AppData/Local/Temp/tempdir2240016499295246797.tmp/personSoap_1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PersonSoapService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PersonSoapService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PersonSoapService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public PersonSoapService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public PersonSoapService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public PersonSoapService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns PersonSoapService
     */
    @WebEndpoint(name = "personSoapApi")
    public PersonSoapService getPersonSoapApi() {
        return super.getPort(PersonSoapApi, PersonSoapService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PersonSoapService
     */
    @WebEndpoint(name = "personSoapApi")
    public PersonSoapService getPersonSoapApi(WebServiceFeature... features) {
        return super.getPort(PersonSoapApi, PersonSoapService.class, features);
    }

}
